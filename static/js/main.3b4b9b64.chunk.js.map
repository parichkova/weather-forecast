{"version":3,"sources":["api/forecast.js","components/WeatherForecastTile.js","components/WeatherDetail.js","components/WeatherDetails.js","components/WeatherForecastList.js","components/Spinner.js","components/App.js","index.js"],"names":["axios","create","baseURL","WeatherForecastTile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickHandle","onClick","id","state","main","wind","date","index","dayName","dateOnly","currentHour","iconName","d","Date","moment","format","time","manageIconName","setState","day","react_default","a","createElement","className","concat","React","Component","WeatherDetail","dateFormatted","weather","WeatherDetails","currentArray","arrayOfDays","mappedHours","map","components_WeatherDetail","key","dt","dt_txt","speed","WeatherForecastList","getSingleDayInfo","array","size","myChunk","chunkSize","rawArr","length","tempArray","slice","push","onClickHanlder","clickedIndex","weatherInfoList","weatherList","weatherRegionInformation","weatherRegion","singleDayForecast","days","_this2","mappedDays","idx","firstDay","dayWeather","src_components_WeatherForecastTile","style","marginTop","name","components_WeatherDetails","Spinner","message","App","lat","lon","errorMessage","isReady","weatherRegionInfo","weatherListInfo","getWeatherInfo","_callee","FORECAST_API_KEY","response","regenerator_default","wrap","_context","prev","next","process","REACT_APP_API_KEY","forecast","get","params","APPID","sent","data","list","city","stop","src_components_WeatherForecastList","components_Spinner","renderBody","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","err","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.3b4b9b64.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'http://api.openweathermap.org/data/2.5',\r\n});\r\n","import React from 'react';\r\nimport moment from 'moment'\r\nimport './WeatherForecastTile.css';\r\n\r\nclass WeatherForecastTile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            main: this.props.main,\r\n            wind: this.props.wind,\r\n            date: this.props.date,\r\n            index: 0,\r\n            dayName: '',\r\n            dateOnly: '',\r\n            currentHour: '',\r\n        }\r\n    }\r\n\r\n    manageIconName() {\r\n        const mainWeather = this.state.main;\r\n        let iconName = '';\r\n\r\n        debugger;\r\n        switch(mainWeather) {\r\n            case 'Clear sky': \r\n            case 'Clear':\r\n                iconName = 'sun';\r\n                break;\r\n            case 'Rain':\r\n                iconName = 'rain';\r\n                break;\r\n            case 'Snow':\r\n                iconName = 'snow';\r\n                break;\r\n            case 'Cloud':\r\n                iconName = 'cloud';\r\n                break;\r\n        }\r\n\r\n      return iconName;\r\n    }\r\n\r\n    onClickHandle = () => {\r\n        debugger;\r\n        this.props.onClick(this.props.id);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const d = new Date(this.state.date);\r\n        const dayName = moment(d).format('dddd');\r\n        const date = moment(d).format('DD MM YYYY');\r\n        const time = moment(d).format('HH:mm')\r\n        const iconName = this.manageIconName();\r\n        \r\n        this.setState({\r\n            day: dayName,\r\n            dateOnly: date,\r\n            currentHour: time,\r\n            iconName\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"three wide column\" id={this.state.index} onClick={this.onClickHandle}>\r\n                <div className=\"text--bold\">{this.state.day} {this.state.currentHour}</div>\r\n                <div>{this.state.main}</div>\r\n                <div className={`weather ${this.state.iconName}`}></div>\r\n                <div>Wind: {this.state.wind} km/h</div>\r\n            </div>\r\n     );\r\n    }\r\n}\r\n\r\nexport default WeatherForecastTile;","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst WeatherDetail = (props) => {\r\n    const {date} = props;\r\n    const d = new Date(date);\r\n    const dayName = moment(d).format('dddd');\r\n    const dateFormatted = moment(d).format('DD MM YYYY');\r\n    const time = moment(d).format('HH:mm')\r\n\r\n    return (\r\n        <div className=\"holder-info\">\r\n            <div className=\"column text--bold\">{`${dayName}, ${time}`}</div>\r\n            <div className=\"column text--bold\">{dateFormatted}</div>\r\n            <div className=\"column text--bold\">{props.weather}</div>\r\n            <div className=\"column text--bold\">Wind: {props.wind} km/h</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherDetail;","import React from 'react';\r\nimport WeatherDetail from './WeatherDetail';\r\n\r\nclass WeatherDetails extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        debugger;\r\n        this.state = {\r\n            currentArray: props.arrayOfDays\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps() {\r\n        this.setState({\r\n            currentArray: this.props.arrayOfDays\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const days = this.state.currentArray;\r\n        \r\n        const mappedHours = days.map(day => {\r\n            const firstDay = day;\r\n            const dayWeather = firstDay.weather[0];\r\n            \r\n            return <WeatherDetail key={day.dt} date={day.dt_txt} wind={day.wind.speed} weather={day.weather[0].main}/>\r\n        });\r\n\r\n        return (\r\n        <div className=\"more-info-holder\"> \r\n            {mappedHours}\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default WeatherDetails;","import React from 'react';\r\nimport WeatherForecastTile from './WeatherForecastTile';\r\nimport WeatherDetails from './WeatherDetails';\r\nimport './WeatherForecastList.css';\r\n\r\nclass WeatherForecastList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      weatherInfoList: this.props.weatherList,\r\n      weatherRegionInformation: this.props.weatherRegion,\r\n      singleDayForecast: [],\r\n      days: [],\r\n      clickedIndex: 0,\r\n    };\r\n  }\r\n\r\n  getSingleDayInfo = (array, size) => {\r\n    const chunkSize = size;\r\n    const rawArr = array;\r\n    const { length } = rawArr;\r\n    let tempArray = [];\r\n    let index = 0;\r\n    let myChunk;\r\n\r\n    if (size) {\r\n      for (index; index < length; index += chunkSize) {\r\n        myChunk = rawArr.slice(index, index + chunkSize);\r\n  \r\n        tempArray.push(myChunk);\r\n      }\r\n    }\r\n    return tempArray;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const days = this.getSingleDayInfo(this.state.weatherInfoList, 8);\r\n\r\n    this.setState({\r\n      days\r\n    });\r\n  }\r\n\r\n  onClickHanlder = (id) => {\r\n    this.setState({ clickedIndex: id });\r\n  }\r\n\r\n  render() {\r\n    const array = this.getSingleDayInfo(this.state.weatherInfoList, 8);\r\n    const mappedDays = this.state.days.map((day, idx) => {\r\n      const firstDay = day[0];\r\n      const dayWeather = firstDay.weather[0];\r\n      return <WeatherForecastTile onClick={this.onClickHanlder} id={idx} key={firstDay.dt} main={dayWeather.main} wind={firstDay.wind.speed} date={firstDay.dt_txt} />\r\n    });\r\n\r\n\r\n    return (\r\n      <div className={`weather-forecast ui container`} style={{ marginTop: '20px' }}>\r\n        <h1 className='ui header'> 5 Day Forecast</h1>\r\n        <div>{this.state.weatherRegionInformation.name}</div>\r\n        <div className=\"ui grid holder\">\r\n          {mappedDays}\r\n        </div>\r\n        <WeatherDetails arrayOfDays={array[this.state.clickedIndex]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherForecastList;","import React from 'react';\r\n\r\nclass Spinner extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {message: ''}\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({message: this.props.message ? this.props.message : 'Loading...'})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui active dimmer\">\r\n        <div className=\"ui big text loader\">\r\n          {this.state.message}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport forecast from '../api/forecast';\r\nimport WeatherForecastList from './WeatherForecastList';\r\nimport Spinner from './Spinner';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    lat: 0,\r\n    lon: 0,\r\n    errorMessage: '',\r\n    isReady: false,\r\n    weatherRegionInfo: '',\r\n    weatherListInfo: []\r\n  };\r\n\r\n  getWeatherInfo = async () => {\r\n    const FORECAST_API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\n    const response = await forecast.get('/forecast', {\r\n      params: {\r\n        APPID: `${FORECAST_API_KEY}`,\r\n        lat: this.state.lat,\r\n        lon: this.state.lon,\r\n       },\r\n    })\r\n\r\n    this.setState({ isReady: true, weatherListInfo: response.data.list, weatherRegionInfo: response.data.city });\r\n  }\r\n\r\n  renderBody() {\r\n    if (this.state.errorMessage && !this.state.lat && !this.state.lon) {\r\n      return  <div>Error: {this.state.errorMessage}</div> \r\n    }\r\n\r\n    if (this.state.isReady && this.state.lat && this.state.lon) {\r\n      return <WeatherForecastList weatherList={this.state.weatherListInfo} weatherRegion={this.state.weatherRegionInfo}/>\r\n    }\r\n\r\n    return  <Spinner/>\r\n  }\r\n\r\n  render() {   \r\n    return <div className=\"border red\">\r\n      {this.renderBody()}\r\n    </div>\r\n    \r\n  }\r\n  \r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n     (position) => {\r\n        this.setState({ lat: position.coords.latitude, lon: position.coords.longitude });\r\n\r\n        this.getWeatherInfo();\r\n      },\r\n\r\n      (err) => this.setState({ errorMessage: err.message })\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}